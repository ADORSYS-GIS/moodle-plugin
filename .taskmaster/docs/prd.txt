<context>
# Overview

A cloud-native, operator-driven Moodle 5 distribution designed to simplify deployment and management of fully isolated Moodle instances. This solution integrates Rust-powered performance enhancements, AI-driven quiz creation, optional headless SPA interfaces, and automated backups, supported by comprehensive observability. It's tailored for DevOps teams, universities, schools, and training institutions seeking a robust, high-performance, and managed Moodle environment without having to assemble individual PHP, infrastructure, and AI tools.

# Core Features

## Moodle Operator

* Automates Moodle deployment with Kubernetes resources (Deployment, Service, Ingress, PVC).
* Requires only a database and cache configuration via Kubernetes secrets, leveraging external management like CloudNativePG.
* Flexible CRD configuration:

  * Authentication: OAuth configuration (enabled, issuer).
  * Headless SPA option: Enablement and mode (full or admin-only).
  * Plugin synchronization: Modes (init container or sidecar) and plugin manifest URLs.

## Backup Operator

* Automates Moodle backups to S3-compatible storage using restic, triggered by MoodleBackup CRDs.

## Quiz Backend Operator

* Manages deployment and lifecycle of quiz-backend service and ChromaDB via Helm charts.
* Connects seamlessly with Moodle through QuizPluginBinding CRD.

## Rust-PHP Extension Kit

* Facilitates high-performance PHP extensions via ext-php-rs.
* Includes exemplary plugins like plagiarism detection and gradebook optimization.

## WASM Widget Pack

* Front-end components built using Leptos, Vite, Tailwind, and DaisyUI.
* Provides widgets like timers and quiz review interfaces with progressive enhancement.

## Plugin Synchronization (Init Container or Sidecar)

* Dynamically fetches Moodle plugins (themes, AI models, quiz modules...).
* Supports initial boot fetching or continuous polling for live updates.

## Observability Pack

* Integrated OpenTelemetry exporters for PHP and Rust.
* Includes dashboards via Grafana and Prometheus (kube-prometheus-stack).

## roo VS Code Integration

* Provides automated generation of tests, release notes, and code improvements directly within VS Code via roo chat rules.

# User Experience

## Personas

* Christian (DevOps Engineer): Responsible for deploying and maintaining Moodle instances. She prioritizes reliability, ease of updates, observability, and rapid response to issues. Her primary interaction involves managing Kubernetes clusters, monitoring performance metrics, and ensuring uptime and security.
* Favour (Plugin Developer): Focuses on creating and maintaining Moodle plugins, leveraging Rust and PHP for backend enhancements and WASM for interactive front-end elements. His workflow involves coding, continuous integration testing, debugging, and ensuring seamless plugin integration.
* Ange (Teacher/Student): The direct end-user, engaging daily with the Moodle interface. Clara values responsiveness, intuitive navigation, and reliable functionality. Her typical activities include creating or completing assignments, quizzes, and accessing course materials.
* External Institutions (Administrators): Institutions like universities and schools requiring fully managed Moodle deployments. They focus on stable, hassle-free operations with minimal direct intervention, typically interacting with higher-level configuration or analytics dashboards.

## Key User Flows

### Cluster Deployment

* Aisha: Initiates deployment by applying MoodleSite CRDs.
* Operator reconciles the CRD, creating Kubernetes resources.
* Moodle becomes accessible via configured ingress, ready for immediate use.

### Local Development

* Ben: Uses Docker Compose to spin up local Moodle and associated services.
* Codes plugins iteratively, leveraging roo integration for automated tests and debugging assistance.
* Validates plugin functionality quickly in a controlled environment before committing changes.

### AI Quiz Generation

* Clara (Teacher): Adds lesson content into Moodle.
* Content is automatically processed by the quiz backend and stored in ChromaDB.
* Clara (Student): Initiates a quiz, and dynamically generated questions based on stored lesson vectors are served.

### SPA Mode Activation

* Aisha: Sets the headless SPA option through the MoodleSite CRD configuration.
* Operator deploys Moodle with either a full front-end SPA or an admin-only interface based on the configuration.
* Users interact with an optimized UI, offering enhanced responsiveness and modern interactions.

## UI/UX Considerations

* Consistency and Responsiveness: Employing Tailwind CSS and DaisyUI ensures consistent design language and a responsive layout across devices and resolutions.
* Robustness and Accessibility: WASM widgets include fallback mechanisms to ensure functionality remains accessible, even when advanced browser capabilities are limited.
* Developer Experience Enhancements: Features such as visible trace IDs in developer mode improve debugging and monitoring capabilities, helping developers quickly identify and resolve issues.
</context>
<PRD>
# Technical Architecture

## System Components

* Moodle Operator (Rust, kube-rs)
* Backup Operator (Rust, kube-rs)
* Quiz Backend Operator (Rust, kube-rs, Helm)
* Database (CloudNativePG PostgreSQL)
* Cache (Redis Sentinel)
* Vector Database (ChromaDB)
* Observability (Grafana, kube-prometheus-stack)

## Data Models (CRDs)

* MoodleSite
* MoodleBackup
* QuizBackend
* ChromaDB
* QuizPluginBinding

## APIs & Integrations

* Kubernetes API and Helm libraries
* Moodle 5 Web-service APIs
* roo MCP integrations (Phi-3, Gemma, Stagehand, Filesystem)
* OAuth 2 Identity Providers

## Infrastructure Requirements

* Kubernetes (version ≥ 1.31), RWX StorageClass, ingress controller
* S3-compatible backup storage
* Optional GPU support for AI models

# Development Roadmap

1. Foundation: Repository scaffolding, Docker Compose setup, continuous integration.
2. Core Operator MVP: Moodle deployment using CRDs and external databases/caches.
3. Plugin Management: Immutable image strategy with plugin-sync options.
4. Quiz Backend: AI-powered backend services and Moodle integration.
5. Observability: Integrating OpenTelemetry and Grafana monitoring.
6. Backup Automation: Scheduled backups via Backup Operator.
7. Enhanced UI: Headless SPA mode with modern UI components.
8. Advanced Features: Rust-based plagiarism detection.
9. Cloud Deployment Automation: Terraform module for rapid cloud deployments.

# Logical Development Sequence

1. Docker Compose for local development.
2. Basic Kubernetes operator for initial deployment.
3. Scaffolding for tests and integration workflows.
4. SDKs for Rust-PHP plugins and WASM widgets.
5. Observability tooling integration.
6. Backup mechanisms for data security.
7. UI enhancements with headless SPA mode.
8. Automated cloud deployment tooling.

# Risks and Mitigations

* Database Configuration Issues: Implement pre-flight connection tests within the operator.
* Scaling ChromaDB: Initial single-node deployment, scale horizontally as needed.
* Plugin Integrity: SHA-256 validation for all downloaded plugins.
* Resource Collisions: Operator-enforced unique PVC names per deployment.
* Resource Constraints for Local AI: Use resource-efficient LLMs by default, with configurable options.

# Plugin Catalogue

* Rust plugins: plagiarism\_detector, gradebook\_fastpath
* Quiz services: quiz\_backend, quiz\_bank\_plugin
* AI integration: ai\_models\_plugin
* UI: theme\_minimal, wasm\_widgets\_pack

# Research & Specifications

* Moodle 5 official PostgreSQL and Nginx documentation
* ext-php-rs ABI compatibility
* CloudNativePG and ChromaDB operator details
* OpenTelemetry extensions for PHP
* roo MCP server integrations

# Rust ↔ WASM / Front-end Integration

* Document handling (PDFium/MuPDF)
* Scientific visualizations (C/OpenGL Rust simulations)
* Real-time media processing (FFmpeg/Tiny-WaveTrimmer)
* In-browser algorithm execution via WASI
* Browser-based data analytics with Polars

# Rust ↔ PHP / Back-end Integration

* High-performance microservices for chat and real-time communication (Axum/Actix)
* PHP extension integration for intensive tasks like CSV parsing, encryption, LaTeX rendering

# Admin-side Rust Tools

* High-speed nightly backups with Rust zstd
* NLP-enhanced tagging for forums
* Efficient large-scale report generation

# Migration Roadmap

* Pilot: Integrate PDF viewer (WASM) and asynchronous CSV export service (Rust).
* Expansion: Deploy computationally intensive question types (WASM) and Redis-backed Rust worker queue.
* Optimization: Dynamic loading of WASM modules; Rust acceleration of core PHP tasks.
* Security and Stability: Browser-side sandboxing (WASI) and secured Rust services with OAuth2 integration.
</PRD>